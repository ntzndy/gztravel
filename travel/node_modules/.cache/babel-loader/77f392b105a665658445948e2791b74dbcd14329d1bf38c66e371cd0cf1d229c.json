{"ast":null,"code":"const GF = require('./galois-field');\n\n/**\r\n * Multiplies two polynomials inside Galois Field\r\n *\r\n * @param  {Uint8Array} p1 Polynomial\r\n * @param  {Uint8Array} p2 Polynomial\r\n * @return {Uint8Array}    Product of p1 and p2\r\n */\nexports.mul = function mul(p1, p2) {\n  const coeff = new Uint8Array(p1.length + p2.length - 1);\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n    }\n  }\n  return coeff;\n};\n\n/**\r\n * Calculate the remainder of polynomials division\r\n *\r\n * @param  {Uint8Array} divident Polynomial\r\n * @param  {Uint8Array} divisor  Polynomial\r\n * @return {Uint8Array}          Remainder\r\n */\nexports.mod = function mod(divident, divisor) {\n  let result = new Uint8Array(divident);\n  while (result.length - divisor.length >= 0) {\n    const coeff = result[0];\n    for (let i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff);\n    }\n\n    // remove all zeros from buffer head\n    let offset = 0;\n    while (offset < result.length && result[offset] === 0) offset++;\n    result = result.slice(offset);\n  }\n  return result;\n};\n\n/**\r\n * Generate an irreducible generator polynomial of specified degree\r\n * (used by Reed-Solomon encoder)\r\n *\r\n * @param  {Number} degree Degree of the generator polynomial\r\n * @return {Uint8Array}    Buffer containing polynomial coefficients\r\n */\nexports.generateECPolynomial = function generateECPolynomial(degree) {\n  let poly = new Uint8Array([1]);\n  for (let i = 0; i < degree; i++) {\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));\n  }\n  return poly;\n};","map":{"version":3,"names":["GF","require","exports","mul","p1","p2","coeff","Uint8Array","length","i","j","mod","divident","divisor","result","offset","slice","generateECPolynomial","degree","poly","exp"],"sources":["C:/Users/zcy/Desktop/code/gztravel/travel/node_modules/qrcode/lib/core/polynomial.js"],"sourcesContent":["const GF = require('./galois-field')\r\n\r\n/**\r\n * Multiplies two polynomials inside Galois Field\r\n *\r\n * @param  {Uint8Array} p1 Polynomial\r\n * @param  {Uint8Array} p2 Polynomial\r\n * @return {Uint8Array}    Product of p1 and p2\r\n */\r\nexports.mul = function mul (p1, p2) {\r\n  const coeff = new Uint8Array(p1.length + p2.length - 1)\r\n\r\n  for (let i = 0; i < p1.length; i++) {\r\n    for (let j = 0; j < p2.length; j++) {\r\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\r\n    }\r\n  }\r\n\r\n  return coeff\r\n}\r\n\r\n/**\r\n * Calculate the remainder of polynomials division\r\n *\r\n * @param  {Uint8Array} divident Polynomial\r\n * @param  {Uint8Array} divisor  Polynomial\r\n * @return {Uint8Array}          Remainder\r\n */\r\nexports.mod = function mod (divident, divisor) {\r\n  let result = new Uint8Array(divident)\r\n\r\n  while ((result.length - divisor.length) >= 0) {\r\n    const coeff = result[0]\r\n\r\n    for (let i = 0; i < divisor.length; i++) {\r\n      result[i] ^= GF.mul(divisor[i], coeff)\r\n    }\r\n\r\n    // remove all zeros from buffer head\r\n    let offset = 0\r\n    while (offset < result.length && result[offset] === 0) offset++\r\n    result = result.slice(offset)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Generate an irreducible generator polynomial of specified degree\r\n * (used by Reed-Solomon encoder)\r\n *\r\n * @param  {Number} degree Degree of the generator polynomial\r\n * @return {Uint8Array}    Buffer containing polynomial coefficients\r\n */\r\nexports.generateECPolynomial = function generateECPolynomial (degree) {\r\n  let poly = new Uint8Array([1])\r\n  for (let i = 0; i < degree; i++) {\r\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))\r\n  }\r\n\r\n  return poly\r\n}\r\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAgB,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,OAAO,CAACC,GAAG,GAAG,SAASA,GAAGA,CAAEC,EAAE,EAAEC,EAAE,EAAE;EAClC,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACH,EAAE,CAACI,MAAM,GAAGH,EAAE,CAACG,MAAM,GAAG,CAAC,CAAC;EAEvD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;MAClCJ,KAAK,CAACG,CAAC,GAAGC,CAAC,CAAC,IAAIV,EAAE,CAACG,GAAG,CAACC,EAAE,CAACK,CAAC,CAAC,EAAEJ,EAAE,CAACK,CAAC,CAAC,CAAC;IACtC;EACF;EAEA,OAAOJ,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,OAAO,CAACS,GAAG,GAAG,SAASA,GAAGA,CAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC7C,IAAIC,MAAM,GAAG,IAAIP,UAAU,CAACK,QAAQ,CAAC;EAErC,OAAQE,MAAM,CAACN,MAAM,GAAGK,OAAO,CAACL,MAAM,IAAK,CAAC,EAAE;IAC5C,MAAMF,KAAK,GAAGQ,MAAM,CAAC,CAAC,CAAC;IAEvB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,OAAO,CAACL,MAAM,EAAEC,CAAC,EAAE,EAAE;MACvCK,MAAM,CAACL,CAAC,CAAC,IAAIT,EAAE,CAACG,GAAG,CAACU,OAAO,CAACJ,CAAC,CAAC,EAAEH,KAAK,CAAC;IACxC;;IAEA;IACA,IAAIS,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGD,MAAM,CAACN,MAAM,IAAIM,MAAM,CAACC,MAAM,CAAC,KAAK,CAAC,EAAEA,MAAM,EAAE;IAC/DD,MAAM,GAAGA,MAAM,CAACE,KAAK,CAACD,MAAM,CAAC;EAC/B;EAEA,OAAOD,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,OAAO,CAACe,oBAAoB,GAAG,SAASA,oBAAoBA,CAAEC,MAAM,EAAE;EACpE,IAAIC,IAAI,GAAG,IAAIZ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,MAAM,EAAET,CAAC,EAAE,EAAE;IAC/BU,IAAI,GAAGjB,OAAO,CAACC,GAAG,CAACgB,IAAI,EAAE,IAAIZ,UAAU,CAAC,CAAC,CAAC,EAAEP,EAAE,CAACoB,GAAG,CAACX,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1D;EAEA,OAAOU,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}