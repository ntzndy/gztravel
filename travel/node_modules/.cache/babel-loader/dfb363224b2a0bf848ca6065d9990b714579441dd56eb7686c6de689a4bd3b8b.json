{"ast":null,"code":"const EXP_TABLE = new Uint8Array(512);\nconst LOG_TABLE = new Uint8Array(256)\n/**\r\n * Precompute the log and anti-log tables for faster computation later\r\n *\r\n * For each possible value in the galois field 2^8, we will pre-compute\r\n * the logarithm and anti-logarithm (exponential) of this value\r\n *\r\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\r\n */;\n(function initTables() {\n  let x = 1;\n  for (let i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x;\n    LOG_TABLE[x] = i;\n    x <<= 1; // multiply by 2\n\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n    if (x & 0x100) {\n      // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D;\n    }\n  }\n\n  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n  for (let i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255];\n  }\n})();\n\n/**\r\n * Returns log value of n inside Galois Field\r\n *\r\n * @param  {Number} n\r\n * @return {Number}\r\n */\nexports.log = function log(n) {\n  if (n < 1) throw new Error('log(' + n + ')');\n  return LOG_TABLE[n];\n};\n\n/**\r\n * Returns anti-log value of n inside Galois Field\r\n *\r\n * @param  {Number} n\r\n * @return {Number}\r\n */\nexports.exp = function exp(n) {\n  return EXP_TABLE[n];\n};\n\n/**\r\n * Multiplies two number inside Galois Field\r\n *\r\n * @param  {Number} x\r\n * @param  {Number} y\r\n * @return {Number}\r\n */\nexports.mul = function mul(x, y) {\n  if (x === 0 || y === 0) return 0;\n\n  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n};","map":{"version":3,"names":["EXP_TABLE","Uint8Array","LOG_TABLE","initTables","x","i","exports","log","n","Error","exp","mul","y"],"sources":["C:/Users/zcy/Desktop/code/gztravel/travel/node_modules/qrcode/lib/core/galois-field.js"],"sourcesContent":["const EXP_TABLE = new Uint8Array(512)\r\nconst LOG_TABLE = new Uint8Array(256)\r\n/**\r\n * Precompute the log and anti-log tables for faster computation later\r\n *\r\n * For each possible value in the galois field 2^8, we will pre-compute\r\n * the logarithm and anti-logarithm (exponential) of this value\r\n *\r\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\r\n */\r\n;(function initTables () {\r\n  let x = 1\r\n  for (let i = 0; i < 255; i++) {\r\n    EXP_TABLE[i] = x\r\n    LOG_TABLE[x] = i\r\n\r\n    x <<= 1 // multiply by 2\r\n\r\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\r\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\r\n    if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)\r\n      x ^= 0x11D\r\n    }\r\n  }\r\n\r\n  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\r\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\r\n  // two GF numbers, no more).\r\n  // @see {@link mul}\r\n  for (let i = 255; i < 512; i++) {\r\n    EXP_TABLE[i] = EXP_TABLE[i - 255]\r\n  }\r\n}())\r\n\r\n/**\r\n * Returns log value of n inside Galois Field\r\n *\r\n * @param  {Number} n\r\n * @return {Number}\r\n */\r\nexports.log = function log (n) {\r\n  if (n < 1) throw new Error('log(' + n + ')')\r\n  return LOG_TABLE[n]\r\n}\r\n\r\n/**\r\n * Returns anti-log value of n inside Galois Field\r\n *\r\n * @param  {Number} n\r\n * @return {Number}\r\n */\r\nexports.exp = function exp (n) {\r\n  return EXP_TABLE[n]\r\n}\r\n\r\n/**\r\n * Multiplies two number inside Galois Field\r\n *\r\n * @param  {Number} x\r\n * @param  {Number} y\r\n * @return {Number}\r\n */\r\nexports.mul = function mul (x, y) {\r\n  if (x === 0 || y === 0) return 0\r\n\r\n  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\r\n  // @see {@link initTables}\r\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]\r\n}\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC;AACrC,MAAMC,SAAS,GAAG,IAAID,UAAU,CAAC,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAPA;AAQE,UAASE,UAAUA,CAAA,EAAI;EACvB,IAAIC,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;IAC5BL,SAAS,CAACK,CAAC,CAAC,GAAGD,CAAC;IAChBF,SAAS,CAACE,CAAC,CAAC,GAAGC,CAAC;IAEhBD,CAAC,KAAK,CAAC,EAAC;;IAER;IACA;IACA,IAAIA,CAAC,GAAG,KAAK,EAAE;MAAE;MACfA,CAAC,IAAI,KAAK;IACZ;EACF;;EAEA;EACA;EACA;EACA;EACA,KAAK,IAAIC,CAAC,GAAG,GAAG,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;IAC9BL,SAAS,CAACK,CAAC,CAAC,GAAGL,SAAS,CAACK,CAAC,GAAG,GAAG,CAAC;EACnC;AACF,CAAC,EAAC,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACAC,OAAO,CAACC,GAAG,GAAG,SAASA,GAAGA,CAAEC,CAAC,EAAE;EAC7B,IAAIA,CAAC,GAAG,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAM,GAAGD,CAAC,GAAG,GAAG,CAAC;EAC5C,OAAON,SAAS,CAACM,CAAC,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACI,GAAG,GAAG,SAASA,GAAGA,CAAEF,CAAC,EAAE;EAC7B,OAAOR,SAAS,CAACQ,CAAC,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACK,GAAG,GAAG,SAASA,GAAGA,CAAEP,CAAC,EAAEQ,CAAC,EAAE;EAChC,IAAIR,CAAC,KAAK,CAAC,IAAIQ,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;;EAEhC;EACA;EACA,OAAOZ,SAAS,CAACE,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACU,CAAC,CAAC,CAAC;AAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}